# Set file path
setwd("~/Desktop/Anomaly-Detection/Powergrid/")
# Including function
if(!exists("formatMhsmm", mode="function")) source("../formatMHSMM.R")
# Read in data
train <- read.csv("train.csv", header = TRUE)
test <- read.csv("test_v1.csv", header = TRUE)
# Extract the global_active_power column
trainGap <- formatMhsmm(data.frame(X = train$Global_active_power[1:500000]))
testGap <- formatMhsmm(data.frame(test$Global_active_power[1:200000]))
# Load package
library(mvtnorm)
library(mhsmm)
# Build hmm with univariant data
# Set state number based on 10000 data in graph
J <- 6
# Set init value pi
pi <- c(1, 0, 0, 0, 0, 0)
A <- matrix(c(0.6,	0.25,	0.1,	0.01,	0.01,	0.32,
0.2,	0.5,	0.16,	0.02,	0.01,	0.02,
0.15,	0.2,	0.5,	0.13,	0.01,	0.03,
0.02,	0.03,	0.21,	0.5,	0.1,	0.05,
0.02,	0.01,	0.01,	0.21,	0.55,	0.16,
0.01,	0.01,	0.02,	0.13,	0.32,	0.42), nrow = J)
# Build emission matrix
B <- list(mu = c(1.204, 1.02, 0.754, 1.334, 1.731, 1.514),
sigma = c(0.989, 0.84, 0.785, 1.14, 1.302, 1.279))
# Build hmm model
model <- hmmspec(init = pi, trans = A, parms.emis = B, dens.emis = dnorm.hsmm, mstep = 10)
# EM algorithom fits an HMM to the data
hmm_train <- hmmfit(trainGap$x, model, mstep = mstep.norm, maxit = 500)
hmm_test <- hmmfit(testGap$x, model, mstep = mstep.norm, maxit = 500)
summary(hmm_train)
plot(hmm_train$loglik, col = "red", type = 'l',
ylab = "log-likelihood", xlab = "Iteration")
points(hmm_test$loglik, col = "blue", type = 'p')
yhat1 <- predict(hmm_train, trainGap$x)
yhat2 <- predict(hmm_train, testGap$x)
plot(yhat1$x, col = 'red', type = 'b', ylab ='Global_active_power_train')
points(yhat2$x, col = 'cyan', type = 'b')
testGap <- formatMhsmm(data.frame(test$Global_active_power[1:1000]))
nrow(hmm_train$loglik)
length(hmm_train$loglik)
summary(hmm_train)
plot(hmm_train$loglik[1:10], col = "red", type = 'l',
ylab = "log-likelihood", xlab = "Iteration")
points(hmm_test$loglik, col = "blue", type = 'p')
plot(hmm_train$loglik[1:30], col = "red", type = 'l',
ylab = "log-likelihood", xlab = "Iteration")
points(hmm_test$loglik, col = "blue", type = 'p')
testGap <- formatMhsmm(data.frame(test$Global_active_power[1000:2000]))
yhat2 <- predict(hmm_train, testGap$x)
plot(yhat1$x, col = 'red', type = 'b', ylab ='Global_active_power_train')
points(yhat2$x, col = 'cyan', type = 'b')
summary(hmm_train)
plot(hmm_train$loglik, col = "red", type = 'l',
ylab = "log-likelihood", xlab = "Iteration")
points(hmm_test$loglik, col = "blue", type = 'p')
plot(trainGap$x, col = 'red', type = 'l')
points(yhat1$x, col = 'blue')
plot(trainGap$x, col = 'red', type = 'l')
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x, col = 'blue')
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[1:40], col = 'blue')
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[1:40], col = 'blue', type = 'p')
?plot
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[41,], col = 'blue', type = 'p')
yhat1$x[41]
yhat1$x[41:]
yhat1$x[41: length(yhat1$x)]
length(yhat1$x)
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[1:5000], col = 'blue', type = 'p')
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[5000:10000], col = 'blue', type = 'p')
?legend
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[5000:10000], col = 'blue', type = 'p')
legend(legend=c("data by HMM", "observation"), col=c('red', 'blue'), lty = 1:2)
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[5000:10000], col = 'blue', type = 'p')
legend(1, 95, legend=c("data by HMM", "observation"), col=c('red', 'blue'), lty = 1:2)
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[5000:10000], col = 'blue', type = 'p')
legend(1, 7, legend=c("data by HMM", "observation"), col=c('red', 'blue'), lty = 1:2)
legend(5, 7, legend=c("data by HMM", "observation"), col=c('red', 'blue'), lty = 1:2)
?lty
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[5000:10000], col = 'blue', type = 'p')
legend(5, 7, legend=c("data by HMM", "observation"), col=c('red', 'blue'), lty = 1)
legend('topleft', legend=c("data by HMM", "observation"), col=c('red', 'blue'), lty = c(0,0))
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[5000:10000], col = 'blue', type = 'p')
legend(6, 7, legend=c("data by HMM", "observation"), col=c('red', 'blue'), lty = c(1:3))
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[5000:10000], col = 'blue', type = 'p')
legend(6, 7, legend=c("data by HMM", "observation"), col=c('red', 'blue'), lty = c(1))
legend(6, 7, legend=c("data by HMM", "observation"), col=c('red', 'blue'), lty = c(0:0))
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[5000:10000], col = 'blue', type = 'p')
legend(6, 7, legend=c("data by HMM", "observation"), col=c('red', 'blue'), lty = c(0:0))
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[5000:10000], col = 'blue', type = 'p')
legend(6, 7, legend=c("data by HMM", "observation"),
col=c('red', 'blue'), lty = c(0:0), lwd=1)
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[5000:10000], col = 'blue', type = 'p')
legend(6, 7, legend=c("data by HMM", "observation"),
col=c('red', 'blue'), lty = c(1, NA), pch = c(NA, 1))
legend('topright', legend=c("data by HMM", "observation"),
col=c('red', 'blue'), lty = c(1, NA), pch = c(NA, 1))
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[5000:10000], col = 'blue', type = 'p')
legend('topright', legend=c("data by HMM", "observation"),
col=c('red', 'blue'), lty = c(1, NA), pch = c(NA, 1))
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[5000:10000], col = 'blue', type = 'p')
legend('topright', legend=c("data by HMM", "observation"),
col=c('red', 'blue'), lty = c(1, NA), pch = c(NA, 1), cex = 0.8)
plot(trainGap$x[1:10000], col = 'red', type = 'l')
points(yhat1$x[5000:10000], col = 'blue', type = 'p')
legend('topright', legend=c("data by HMM", "observation"),
col=c('red', 'blue'), lty = c(1, NA), pch = c(NA, 1), cex = 0.6)
plot(trainGap$x[1:20000], col = 'red', type = 'l')
points(yhat1$x[5000:10000], col = 'blue', type = 'p')
legend('topright', legend=c("data by HMM", "observation"),
col=c('red', 'blue'), lty = c(1, NA), pch = c(NA, 1), cex = 0.6)
?predict
plot(yhat1$x[1:20000], col = 'red', type = 'l')
points(yhat1$x[5000:10000], col = 'blue', type = 'p')
legend('topright', legend=c("data by HMM", "observation"),
col=c('red', 'blue'), lty = c(1, NA), pch = c(NA, 1), cex = 0.6)
plot(yhat1$x[1:20000], col = 'red', type = 'l')
points(yhat1$x[5000:10000], col = 'blue', type = 'p')
legend('topright', legend=c("data by HMM", "observation"),
col=c('red', 'blue'), lty = c(1, NA), pch = c(NA, 1), cex = 0.6)
plot(yhat1$x[1:20000], col = 'red', type = 'l')
points(testGap$x[5000:10000], col = 'blue', type = 'p')
legend('topright', legend=c("data by HMM", "observation"),
col=c('red', 'blue'), lty = c(1, NA), pch = c(NA, 1), cex = 0.6)
plot(yhat1$x[1:20000], col = 'red', type = 'l')
points(testGap$x[1:1000], col = 'blue', type = 'p')
legend('topright', legend=c("data by HMM", "observation"),
col=c('red', 'blue'), lty = c(1, NA), pch = c(NA, 1), cex = 0.6)
plot(hmm_train$loglik, col = "red", type = 'l',
ylab = "log-likelihood", xlab = "Iteration")
points(yhat2$loglik, col = "blue", type = 'p')
# Set file path
setwd("~/Desktop/Anomaly-Detection/Powergrid/")
# Including function
if(!exists("formatMhsmm", mode="function")) source("../formatMHSMM.R")
# Read in data
train <- read.csv("train.csv", header = TRUE)
test <- read.csv("test_v1.csv", header = TRUE)
# Extract the global_active_power column
trainGap <- formatMhsmm(data.frame(X = train$Global_active_power))
testGap <- formatMhsmm(data.frame(test$Global_active_power))
# Load package
library(mvtnorm)
library(mhsmm)
# Build hmm with univariant data
# Set state number based on 10000 data in graph
J <- 6
# Set init value pi
pi <- c(1, 0, 0, 0, 0, 0)
A <- matrix(c(0.6,	0.25,	0.1,	0.01,	0.01,	0.32,
0.2,	0.5,	0.16,	0.02,	0.01,	0.02,
0.15,	0.2,	0.5,	0.13,	0.01,	0.03,
0.02,	0.03,	0.21,	0.5,	0.1,	0.05,
0.02,	0.01,	0.01,	0.21,	0.55,	0.16,
0.01,	0.01,	0.02,	0.13,	0.32,	0.42), nrow = J)
# Build emission matrix
B <- list(mu = c(1.204, 1.02, 0.754, 1.334, 1.731, 1.514),
sigma = c(0.989, 0.84, 0.785, 1.14, 1.302, 1.279))
# Build hmm model
model <- hmmspec(init = pi, trans = A, parms.emis = B, dens.emis = dnorm.hsmm, mstep = 10)
# EM algorithom fits an HMM to the data
hmm_train <- hmmfit(trainGap$x, model, mstep = mstep.norm, maxit = 500)
#hmm_test <- hmmfit(testGap$x, model, mstep = mstep.norm, maxit = 500)
yhat1 <- predict(hmm_train, trainGap$x)
yhat2 <- predict(hmm_train, testGap$x)
plot(yhat2$x[1:20000], col = 'red', type = 'l')
points(testGap$x[1:1000], col = 'blue', type = 'p')
legend('topright', legend=c("data by HMM", "observation"),
col=c('red', 'blue'), lty = c(1, NA), pch = c(NA, 1), cex = 0.6)
plot(yhat2$x[1:20000], col = 'red', type = 'l')
points(testGap$x[1:10000], col = 'blue', type = 'p')
legend('topright', legend=c("data by HMM", "observation"),
col=c('red', 'blue'), lty = c(1, NA), pch = c(NA, 1), cex = 0.6)
plot(yhat1$x[1:20000], col = 'red', type = 'l')
points(trainGap$x[1:10000], col = 'blue', type = 'p')
legend('topright', legend=c("data by HMM", "observation"),
col=c('red', 'blue'), lty = c(1, NA), pch = c(NA, 1), cex = 0.6)
# EM algorithom fits an HMM to the data
hmm_train <- hmmfit(trainGap$x, model, mstep = mstep.norm, maxit = 500)
hmm_test <- hmmfit(testGap$x, model, mstep = mstep.norm, maxit = 500)
