x <- replicate(J, diff(c(0, sort(runif(2)), 1)))
J <- 6
x <- replicate(J, diff(c(0, sort(runif(2)), 1)))
View(x)
x <- replicate(J, diff(c(0, sort(runif(1)), 1)))
View(x)
x <- replicate(J, diff(c(0, sort(runif(0)), 1)))
x <- replicate(J, diff(c(0, sort(runif(1)), 2)))
View(x)
x <- replicate(J, diff(c(1, sort(runif(1)), 1)))
View(x)
x <- replicate(J, diff(c(0, sort(runif(1)), 1)))
View(x)
x <- diff(c(0, sort(runif(1)), 1)
# Build transition matrix A, entry by row
# A <- matrix(c(0.8, 0.5, 0.1, 0.05, 0.2, 0.5, 0.15, 0.3, 0.4,
#               0.8, 0.5, 0.1, 0.05, 0.2, 0.5, 0.15, 0.4, 0.3,
#               0.8, 0.5, 0.1, 0.05, 0.4, 0.5, 0.15, 0.3, 0.2,
#               0.4, 0.5, 0.1, 0.05, 0.2, 0.5, 0.15, 0.3, 0.8,
#               0.8, 0.1, 0.5, 0.05, 0.2, 0.5, 0.15, 0.3, 0.4,
#               0.8, 0.5, 0.1, 0.05, 0.2, 0.15, 0.5, 0.3, 0.4,
#               0.15, 0.5, 0.1, 0.05, 0.2, 0.5, 0.8, 0.3, 0.4,
#               0.8, 0.05, 0.1, 0.5, 0.2, 0.5, 0.15, 0.3, 0.4,
#               0.8, 0.5, 0.1, 0.05, 0.5, 0.2, 0.15, 0.3, 0.4), nrow = J)
A <- matrix(runif(J*J, 0,1),nrow = J)
# Build emission matrix
B <- list(mu = c(runif(J, 0,1.5)),
sigma = c(runif(J, 0,0.5)))
# Build hmm model
model <- hmmspec(init = pi, trans = A, parms.emis = B, dens.emis = dnorm.hsmm, mstep = 10)
#model
# EM algorithom fits an HMM to the data
hmm <- hmmfit(N, model, mstep = mstep.norm, maxit = 500)
# Summary
summary(hmm)
plot(hmm$loglik, type = 'l', ylab = "log-likelihood", xlab = "Iteration")
#yhat <- predict(hmm, N)
plot(yhat)
x <- diff(c(0, sort(runif(1)), 1))
x <- diff(c(0, sort(runif(1))))
1
1
1
x <- diff(c(0, sort(runif(1)), 1))
x <- diff(1,c(0, sort(runif(1))))
x <- diff(1,c(0, sort(runif(1))))
x <- diff(c(0, sort(runif(1)), 1))
x <- diff(c(0, sort(runif(1)), 5))
x <- diff(c(0, sort(runif(J,0,1)), 1))
x
x <- diff(c(0, sort(runif(3,0,1)), 1))
x
sum(x)
pi <- diff(c(0, sort(runif((J-1),0,1)), 1))
A <- matrix(runif(J*J, 0,1),nrow = J)
A <- matrix(replicate(diff(c(0, sort(runif((J-1),0,1)), 1))),nrow = J)
View(A)
sum(A[1])
sum(A[1][:])
sum(A[1][:])
sum(A[][1])
sum(A[:][1])
J <- 6
pi <- diff(c(0, sort(runif((J-1),0,1)), 1))
A <- matrix(replicate(diff(c(0, sort(runif((J-1),0,1)), 1))),nrow = J)
B <- list(mu = c(runif(J, 0,1.5)),
sigma = c(runif(J, 0,0.5)))
setwd("~/Desktop/Anomaly-Detection/Powergrid/")
train <- read.csv("train.csv", header = TRUE)
test <- read.csv("test_v1.csv")
Gap.col <- data.frame(X = train$Global_active_power[1:10000])
Gap.col[is.na(Gap.col)] <- 0
N <- as.numeric(Gap.col$X)
class(N) <- "hsmm.data"
library(mvtnorm)
library(mhsmm)
J <- 6
pi <- diff(c(0, sort(runif((J-1),0,1)), 1))
A <- matrix(replicate(diff(c(0, sort(runif((J-1),0,1)), 1))),nrow = J)
A <- matrix(replicate(J,diff(c(0, sort(runif((J-1),0,1)), 1))),nrow = J)
B <- list(mu = c(runif(J, 0,1.5)),
sigma = c(runif(J, 0,0.5)))
model <- hmmspec(init = pi, trans = A, parms.emis = B, dens.emis = dnorm.hsmm, mstep = 10)
hmm <- hmmfit(N, model, mstep = mstep.norm, maxit = 500)
summary(hmm)
plot(hmm$loglik, type = 'l', ylab = "log-likelihood", xlab = "Iteration")
plot(yhat)
A <- matrix(replicate(J,diff(c(0, sort(runif((J-1),0,1)), 1))))
View(A)
,nrow = J
A <- matrix(replicate(J,diff(c(0, sort(runif((J-1),0,1)), 1))),nrow = J)
View(A)
t(A)
t(A)
t(A)
rm(t)
t(A)
base::t(A)
base::t(A)
A <- matrix(replicate(J,diff(c(0, sort(runif((J-1),0,1)), 1))),nrow = J)
View(A)
base::t(A)
base::t(A)
B <- list(mu = c(runif(J, 0,1.5)),
sigma = c(runif(J, 0,0.5)))
model <- hmmspec(init = pi, trans = A, parms.emis = B, dens.emis = dnorm.hsmm, mstep = 10)
hmm <- hmmfit(N, model, mstep = mstep.norm, maxit = 500)
summary(hmm)
plot(hmm$loglik, type = 'l', ylab = "log-likelihood", xlab = "Iteration")
plot(yhat)
yhat <- predict(hmm, N)
plot(yhat)
J <- 10
pi <- diff(c(0, sort(runif((J-1),0,1)), 1))
A <- matrix(replicate(J,diff(c(0, sort(runif((J-1),0,1)), 1))),nrow = J)
base::t(A)   #transpose matrix
B <- list(mu = c(runif(J, 0,1.5)),
sigma = c(runif(J, 0,0.5)))
model <- hmmspec(init = pi, trans = A, parms.emis = B, dens.emis = dnorm.hsmm, mstep = 10)
hmm <- hmmfit(N, model, mstep = mstep.norm, maxit = 500)
summary(hmm)
plot(hmm$loglik, type = 'l', ylab = "log-likelihood", xlab = "Iteration")
yhat <- predict(hmm, N)
plot(yhat)
N
range(N)
mean(N)
meanN <- range(N)/J
meanN[1]
meanN[2]
meanN <- range(N)
meanN[2]
diffmeanN <- meanN[2] - meanN[1]
diffmeanN <- diffmeanN / J
B <- list(mu = c(for (i in 1:J) {diffmeanN += diffmeanN}),
sigma = c(runif(J, 0,0.5)))
B <- list(mu = c(for (i in 1:J) {mu <-  mu + diffmeanN}),
sigma = c(runif(J, 0,0.5)))
mu[1] = diffmeanN
for (i in 2:J) {
mu[i] = diffmeanN + mu[i-1]
}
std(N)
sd(N)
meanN <- range(N)
B <- list(mu = c(runif(J, meanN[1],meanN[2])),
sigma = c(runif(J, 0,sd[N])))
standardD = sd[N]
sd[N]
B <- list(mu = c(runif(J, meanN[1],meanN[2])),
sigma = c(runif(J, 0,standardD)))
sd]N]
sd[N]
N
standardD = sd(N)
B <- list(mu = c(runif(J, meanN[1],meanN[2])),
sigma = c(runif(J, 0,sd(N))))
setwd("~/Desktop/Anomaly-Detection/Powergrid/")
train <- read.csv("train.csv", header = TRUE)
test <- read.csv("test_v1.csv")
Gap.col <- data.frame(X = train$Global_active_power[1:10000])
Gap.col[is.na(Gap.col)] <- 0
N <- as.numeric(Gap.col$X)
class(N) <- "hsmm.data"
library(mvtnorm)
library(mhsmm)
J <- 10
pi <- diff(c(0, sort(runif((J-1),0,1)), 1))
A <- matrix(replicate(J,diff(c(0, sort(runif((J-1),0,1)), 1))),nrow = J)
base::t(A)   #transpose matrix
meanN <- range(N)
B <- list(mu = c(runif(J, meanN[1],meanN[2])),
sigma = c(runif(J, 0,sd(N))))
model <- hmmspec(init = pi, trans = A, parms.emis = B, dens.emis = dnorm.hsmm, mstep = 10)
hmm <- hmmfit(N, model, mstep = mstep.norm, maxit = 500)
summary(hmm)
plot(hmm$loglik, type = 'l', ylab = "log-likelihood", xlab = "Iteration")
yhat <- predict(hmm, N)
plot(yhat)
split(meanN[2], sample(1:N, nrow(df), replace=T))
split(meanN[2], J)
split(meanN[2], mean[2]/J)
split(meanN[2], meanN[2]/J)
split(meanN[2], seq_along(meanN[2]/J))
cut_number(meanN[2],J)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
cut_number(meanN[2],J)
xmean <- meanN[1] .. meanN[2]
xmean <- meanN[1]: meanN[2]
cut_number(meanN[2],J)
cut_number(xmean[2],J)
B <- list(mu = sort(c(runif(J, meanN[1],meanN[2]))),
sigma = c(runif(J, 0,sd(N))))
B
B <- list(mu = sort(c(runif(J, meanN[1],meanN[2]))),
sigma = sort(c(runif(J, 0,sd(N)))))
B
X
setwd("~/Desktop/Anomaly-Detection/Powergrid/")
train <- read.csv("train.csv", header = TRUE)
test <- read.csv("test_v1.csv")
Gap.col <- data.frame(X = train$Global_active_power[1:10000])
X
Gap.col
Tgap.col <- data.frame(test$Global_active_power[1:20000])
Tgap.col
library(readr)
test1 <- read_csv("~/Desktop/Anomaly-Detection/Powergrid/test1.txt")
View(test1)
library(readr)
train <- read_csv("~/Desktop/Anomaly-Detection/Powergrid/train.txt")
View(train)
setwd("~/Desktop/Anomaly-Detection/Powergrid/")
train <- read.csv("train.csv", header = TRUE)
test <- read.csv("test_v1.csv")
Gap.col <- data.frame(X = train$Global_active_power[1:21996])
Tgap.col <- data.frame(test$Global_active_power[1:43793])
Gap.col[is.na(Gap.col)] <- 0
N <- as.numeric(Gap.col$X)
class(N) <- "hsmm.data"
library(mvtnorm)
library(mhsmm)
library(ggplot2)
J <- 4
pi <- diff(c(0, sort(runif((J-1),0,1)), 1))
A <- matrix(replicate(J,diff(c(0, sort(runif((J-1),0,1)), 1))),nrow = J)
base::t(A)   #transpose matrix
meanN <- range(N)
B <- list(mu = sort(c(runif(J, meanN[1],meanN[2]))),
sigma = sort(c(runif(J, 0,sd(N)))))
model <- hmmspec(init = pi, trans = A, parms.emis = B, dens.emis = dnorm.hsmm, mstep = 10)
hmm <- hmmfit(N, model, mstep = mstep.norm, maxit = 500)
summary(hmm)
plot(hmm$loglik, type = 'l', ylab = "log-likelihood", xlab = "Iteration")
yhat <- predict(hmm, N)
plot(yhat)
Gap.col <- data.frame(X = train$Global_active_power[21996:547596])
Tgap.col <- data.frame(test$Global_active_power[1:43793])
Gap.col[is.na(Gap.col)] <- 0
N <- as.numeric(Gap.col$X)
class(N) <- "hsmm.data"
library(mvtnorm)
library(mhsmm)
library(ggplot2)
J <- 4
pi <- diff(c(0, sort(runif((J-1),0,1)), 1))
A <- matrix(replicate(J,diff(c(0, sort(runif((J-1),0,1)), 1))),nrow = J)
base::t(A)   #transpose matrix
meanN <- range(N)
B <- list(mu = sort(c(runif(J, meanN[1],meanN[2]))),
sigma = sort(c(runif(J, 0,sd(N)))))
model <- hmmspec(init = pi, trans = A, parms.emis = B, dens.emis = dnorm.hsmm, mstep = 10)
hmm <- hmmfit(N, model, mstep = mstep.norm, maxit = 500)
summary(hmm)
plot(hmm$loglik, type = 'l', ylab = "log-likelihood", xlab = "Iteration")
yhat <- predict(hmm, N)
plot(yhat)
yhat
Gap.col <- data.frame(X = train$Global_active_power[21996:547596])
Tgap.col <- data.frame(test$Global_active_power[1:43793])
Gap.col[is.na(Gap.col)] <- 0
N <- as.numeric(Gap.col$X)
class(N) <- "hsmm.data"
library(mvtnorm)
library(mhsmm)
library(ggplot2)
J <- 6
pi <- diff(c(0, sort(runif((J-1),0,1)), 1))
A <- matrix(replicate(J,diff(c(0, sort(runif((J-1),0,1)), 1))),nrow = J)
base::t(A)   #transpose matrix
meanN <- range(N)
B <- list(mu = sort(c(runif(J, meanN[1],meanN[2]))),
sigma = sort(c(runif(J, 0,sd(N)))))
model <- hmmspec(init = pi, trans = A, parms.emis = B, dens.emis = dnorm.hsmm, mstep = 10)
hmm <- hmmfit(N, model, mstep = mstep.norm, maxit = 500)
summary(hmm)
plot(hmm$loglik, type = 'l', ylab = "log-likelihood", xlab = "Iteration")
yhat <- predict(hmm, N)
plot(yhat)
yhat
